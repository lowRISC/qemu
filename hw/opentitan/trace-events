# OpenTitan EarlGrey Trace Events

# ot_aes.c

ot_aes_io_read_out(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64", pc=0x%" PRIx64
ot_aes_io_write(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_aes_buffer(const char *mode, const char * msg, const char * hexbuf) "[%s] %s: %s"
ot_aes_request_entropy(void) ""
ot_aes_schedule(void) ""
ot_aes_reseed(const char *reason) "%s"
ot_aes_fill_entropy(uint32_t bits, bool fips) "0x%08" PRIx32 " fips:%u"
ot_aes_init(const char *what) "%s"
ot_aes_debug(const char *func, int line, const char *msg) "%s:%d %s"
ot_aes_error(const char *func, int line, const char *err) "%s:%d %s"
ot_aes_info(const char *func, int line, const char *errl) "%s:%d %s"

# ot_alert.c

ot_alert_io_read_out(unsigned int addr, uint64_t val, uint64_t pc) "addr=0x%02x, val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_alert_io_write(unsigned int addr, uint64_t val, uint64_t pc) "addr=0x%02x, val=0x%" PRIx64 ", pc=0x%" PRIx64

# ot_aon_timer.c

ot_aon_timer_read_out(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64", pc=0x%" PRIx64
ot_aon_timer_write(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64

# ot_ast.c

ot_ast_io_read_out(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_ast_io_write(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64

# ot_clkmgr.c

ot_clkmgr_clock_hint(const char *name, unsigned clock, bool active) "%s(%u): %u"
ot_clkmgr_get_clock_hints(uint32_t req, uint32_t status, uint32_t hint) "req:0x%02x clk:0x%02x hint:0x%02x"
ot_clkmgr_io_read_out(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_clkmgr_io_write(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64

# ot_csrng.c

ot_csrng_change_state(int line, const char *old, int nold, const char *new, int nnew) "@ %d [%s:%d] -> [%s:%d]"
ot_csrng_command_scheduler(unsigned slot, const char *action) "#%u: %s"
ot_csrng_complete_command(unsigned slot, const char *kind, const char *cmd, unsigned acmd, int res) "#%u (%s) acmd: %s(%u): %d"
ot_csrng_connection(unsigned slot) "#%u"
ot_csrng_end_of_gen(unsigned slot, unsigned rempack) "#%u rem %u"
ot_csrng_entropy_injecter(unsigned slot, const char *action) "#%u: %s"
ot_csrng_error(const char *func, int line, const char *err) "%s:%d %s"
ot_csrng_expedite_uninstantiation(unsigned slot) "#%u"
ot_csrng_fill_entropy(unsigned slot, bool fips) "#%u fips %u"
ot_csrng_generate(unsigned slot, unsigned count) "#%u %u packets to generate"
ot_csrng_hwapp_need_entropy(unsigned slot, const char *msg) "#%u: %s"
ot_csrng_hwapp_ready(unsigned slot, bool ready, unsigned rem) "#%u: %u rem %u"
ot_csrng_info(const char *func, int line, const char *msg, uint32_t value) "%s:%d %s: 0x%08x"
ot_csrng_instanciate(unsigned slot, bool on) "#%u: %u"
ot_csrng_invalid_state(const char *func, const char *state, int st) "%s [%s:%d]"
ot_csrng_io_read_out(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_csrng_io_write(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_csrng_irqs(uint32_t active, uint32_t mask, uint32_t eff) "act:0x%08x msk:0x%08x eff:0x%08x"
ot_csrng_push_command(unsigned slot, const char *cmd, unsigned acmd, char code, unsigned len) "#%u: %s(%u) %clen: %u"
ot_csrng_retry_es_init(unsigned retry_count) "rescheduling initial ES request: %u to go"
ot_csrng_schedule(unsigned slot, const char *kind) "#%u: %s"
ot_csrng_show_command(const char *msg, unsigned slot, const char *cmd, unsigned acmd) "%s slot #%u, acmd: %s(%u)"
ot_csrng_swapp_fill(unsigned count) "%u to go"
ot_csrng_try_schedule_genbits(unsigned slot, bool ready, bool queued, unsigned rem) "? #%u rdy:%u q:%u rem:%u"

# ot_edn.c

ot_edn_change_state(unsigned appid, int line, const char *old, int nold, const char *new, int nnew) "a#%u @ %d [%s:%d] -> [%s:%d]"
ot_edn_connect_endpoint(unsigned appid, unsigned epid) "a#%u:e#%u"
ot_edn_ctrl_in_state(unsigned appid, const char *state, int nstate) "a#%u [%s:%d]"
ot_edn_csrng_ack(unsigned appid, const char *state, int level) "a#%u %s %d"
ot_edn_enable(unsigned appid, const char *msg) "a#%u: %s"
ot_edn_ep_fifo(unsigned appid, const char *msg, unsigned remwslot) "a#%u %s rem:%u"
ot_edn_ep_request(unsigned appid, bool avail, const char *state, int st, bool refill, unsigned rem) "a#%u avail %u, [%s:%d], refill %u, rem %u"
ot_edn_error(unsigned appid, const char *func, int line, const char *err) "a#%u %s:%d %s"
ot_edn_fill_bits(unsigned appid, unsigned rem, bool packet_fips, bool fips) "a#%u rem %u, fips %u/%u"
ot_edn_fill_endpoint(unsigned appid, unsigned epid, uint32_t bits, bool fips, size_t gcnt, size_t tcnt) "a#%u:e#%u bits 0x%08x fips %u count %lu/%lu"
ot_edn_dinfo(unsigned appid, const char *func, int line, const char *msg, uint32_t value) "a#%u %s:%d %s %u"
ot_edn_xinfo(unsigned appid, const char *func, int line, const char *msg, uint32_t value) "a#%u %s:%d %s 0x%08x"
ot_edn_invalid_state(unsigned appid, const char *func, const char *state, int st) "a#%u %s [%s:%d]"
ot_edn_io_read_out(unsigned appid, unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "a#%u addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_edn_io_write(unsigned appid, unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "a#%u addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_edn_irqs(unsigned appid, uint32_t active, uint32_t mask, uint32_t eff) "#%u act:0x%08x msk:0x%08x eff:0x%08x"
ot_edn_request_entropy(unsigned appid, unsigned epid) "a#%u:e#%u"
ot_edn_schedule(unsigned appid, const char *cause) "a#%u %s"
ot_edn_handle_ep_request(unsigned appid, unsigned epid) "a#%u:e#%u"
ot_edn_update_genbits_ready(unsigned appid, unsigned rem, unsigned fslot, bool accept) "a#%u rem packet %u, free slot %u, accept? %u"

# ot_entropy_src.c

ot_entropy_src_available(const char *state, int st) "entropy source is ready in [%s:%u]"
ot_entropy_src_change_state(int line, const char *old, int nold, const char *new, int nnew) "@ %d [%s:%d] -> [%s:%d]"
ot_entropy_src_error(const char *msg, const char *state, int st) "%s [%s:%u]"
ot_entropy_src_hwfifo_fill_entropy(unsigned count) "up to %u"
ot_entropy_src_info(const char *msg) "%s"
ot_entropy_src_init_ongoing(const char *state, int st) "entropy source still initializing in [%s:%u]"
ot_entropy_src_io_read_out(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_entropy_src_io_write(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_entropy_src_is_fips_capable(bool en, bool es_route, bool es_type, bool rng_bit_en, bool res) "en:%u rt:%u tp:%u rb:%u => %u"
ot_entropy_src_no_entropy(unsigned count) "only %u words available"
ot_entropy_src_otp_conf(bool fw_read, bool fw_over) "fw_read: %u fw_over %u"

# ot_flash.c

ot_flash_io_read_out(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64", pc=0x%" PRIx64
ot_flash_io_write(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_flash_mem_read_out(unsigned addr, unsigned size, uint32_t val, uint64_t pc) "addr=0x%02x (%u), val=0x%08x, pc=0x%" PRIx64
ot_flash_op_start(int op) "%d"
ot_flash_op_complete(int op, bool success) "%d: %u"
ot_flash_error(const char *func, int line, const char *err) "%s:%d %s"
ot_flash_info(const char *func, int line, const char *msg, uint32_t value) "%s:%d %s: 0x%08x"
ot_flash_info_part(uint32_t op_addr, unsigned bank, unsigned infosel, unsigned addr) "op_addr 0x%06x bank %u infosel %u addr 0x%06x"

# ot_hmac.c

ot_hmac_io_read_out(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64", pc=0x%" PRIx64
ot_hmac_io_write(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_hmac_fifo_write(unsigned int addr, uint64_t val, unsigned int size, uint64_t pc) "addr=0x%02x, val=0x%" PRIx64 " (%u), pc=0x%" PRIx64
ot_hmac_debug(const char *msg) "%s"

# ot_ibex_wrapper.c

ot_ibex_wrapper_io_read_out(unsigned int addr, const char * regname, uint32_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%08x, pc=0x%" PRIx64
ot_ibex_wrapper_io_write(unsigned int addr, const char * regname, uint32_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%08x, pc=0x%" PRIx64
ot_ibex_wrapper_info(const char *func, int line, const char *msg) "%s:%d %s"
ot_ibex_wrapper_map(unsigned slot, uint32_t src, uint32_t dst, uint32_t size) "region %u from 0x%08x to 0x%08x on 0x%x bytes"
ot_ibex_wrapper_fill_entropy(uint32_t bits, bool fips) "0x%08" PRIx32 " fips:%u"
ot_ibex_wrapper_request_entropy(bool again) "%u"
ot_ibex_wrapper_unmap(unsigned slot) "region %u"
ot_ibex_wrapper_error(const char *msg) "%s"

# ot_lifecycle.c

ot_lifecycle_io_read_out(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_lifecycle_io_write(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64

# ot_otbn.c

ot_otbn_change_status(const char * status) "status=%s"
ot_otbn_deny(uint64_t pc, const char *msg) "pc=0x%" PRIx64 ", %s"
ot_otbn_error(const char *msg) "%s"
ot_otbn_io_read_out(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_otbn_io_write(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_otbn_irq(uint32_t active, uint32_t mask, bool level) "act:0x%08x msk:0x%08x lvl:%u"
ot_otbn_mem_read(char mem, uint32_t addr, uint32_t value) "%cmem addr=0x%04x, val=0x%08x"
ot_otbn_mem_write(char mem, uint32_t addr, uint32_t value, const char *outcome) "%cmem addr=0x%04x, val=0x%08x%s"
ot_otbn_post_execute(uint32_t errbits, uint32_t insncount) "errbits=0x%08x, insncount=%u"
ot_otbn_proxy_completion_bh(unsigned cmd) "aftercmd=0x%02x"
ot_otbn_proxy_entropy_request(unsigned rnd) "%u"
ot_otbn_proxy_entropy_req_bh(void) ""
ot_otbn_proxy_push_entropy(const char *kind, bool fips) "%s: fips %u"
ot_otbn_request_entropy(unsigned ep) "ep:%u"

# ot_otp.c

ot_otp_io_read_out(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64", pc=0x%" PRIx64
ot_otp_io_write(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_otp_access_error_on(int part, unsigned addr) "part #%u, addr 0x%04x"
ot_otp_lifecycle(uint32_t lc_state, unsigned tcount) "lifecyle 0x%08x, transition count %u"

# ot_pinmux.c

ot_pinmux_io_read_out(unsigned int addr, uint64_t val, uint64_t pc) "addr=0x%02x, val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_pinmux_io_write(unsigned int addr, uint64_t val, uint64_t pc) "addr=0x%02x, val=0x%" PRIx64 ", pc=0x%" PRIx64

# ot_pwrmgr.c

ot_pwrmgr_io_read_out(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_pwrmgr_io_write(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64

# ot_sensor.c

ot_sensor_io_read_out(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_sensor_io_write(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64

# ot_spi_host.c

ot_spi_host_reset(const char *msg) "%s"
ot_spi_host_transfer(uint32_t tx_data, uint32_t rx_data) "tx_data: 0x%02" PRIx32 " rx_data: 0x%02" PRIx32
ot_spi_host_read(uint64_t addr, const char * regname, uint64_t val, uint64_t pc) "addr:0x%02" PRIx64 " (%s), val:0x%" PRIx64 ", pc:0x%" PRIx64
ot_spi_host_read_repeat(size_t count) "last read repeated %zu times"
ot_spi_host_write(uint64_t addr, const char * regname, uint64_t val, uint64_t pc) "addr:0x%02" PRIx64 " (%s), val:0x%" PRIx64 ", pc:0x%" PRIx64
ot_spi_host_cs(uint32_t csid, const char *level) "cs#:%u %sselected"
ot_spi_host_status(const char *msg, uint32_t status, const char *str, unsigned cmd, unsigned rxd, unsigned txd) "%s 0x%08" PRIx32 " s:%s cq:%u rq:%u tq:%u"
ot_spi_host_command(const char *dir, const char *spd, uint32_t csid, bool active, unsigned len, bool start) "d:%s s:%s cs#:%u csa:%u len:%u (t:%u)"
ot_spi_host_fsm(const char *cause) "step %s"
ot_spi_host_reject(const char *msg) "%s"
ot_spi_host_debug(const char *msg) "%s"
ot_spi_host_debug1(const char *msg, uint32_t val) "%s 0x%" PRIx32

# ot_timer.c

ot_timer_read_out(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64", pc=0x%" PRIx64
ot_timer_write(unsigned int addr, const char * regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64

# ot_uart.c

ot_uart_debug(const char *msg) "%s"
ot_uart_io_read(unsigned int addr, const char *regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64", pc=0x%" PRIx64
ot_uart_io_write(unsigned int addr, const char *regname, uint64_t val, uint64_t pc) "addr=0x%02x (%s), val=0x%" PRIx64 ", pc=0x%" PRIx64
ot_uart_irqs(uint32_t active, uint32_t mask, uint32_t eff) "act:0x%08x msk:0x%08x eff:0x%08x"
