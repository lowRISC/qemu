# OpenTitan EarlGrey Trace Events

# ot_aes.c

ot_aes_buffer(const char *mode, const char * msg, const char * hexbuf) "[%s] %s: %s"
ot_aes_debug(const char *func, int line, const char *msg) "%s:%d %s"
ot_aes_error(const char *func, int line, const char *err) "%s:%d %s"
ot_aes_fill_entropy(uint32_t bits, bool fips) "0x%08x fips:%u"
ot_aes_info(const char *func, int line, const char *errl) "%s:%d %s"
ot_aes_init(const char *what) "%s"
ot_aes_io_read_out(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_aes_io_write(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_aes_request_entropy(void) ""
ot_aes_reseed(const char *reason) "%s"
ot_aes_schedule(void) ""

# ot_alert.c

ot_alert_cancel_timeout(const char *id, char cls) "%s: class %c"
ot_alert_error(const char *id, char cls, const char *msg) "%s: class %c: %s"
ot_alert_esc_count(const char *id, char cls, const char *st, uint32_t cnt) "%s: class %c [%s] %u cycles"
ot_alert_escalation(const char *id, char cls, unsigned esc, const char *msg) "%s: class %c esc %u %s"
ot_alert_fsm_update(const char *id, char cls, const char *st, bool timer, bool atrig) "%s: class %c [%s] timer %u atrig %u"
ot_alert_irqs(const char *id, uint32_t active, uint32_t mask, uint32_t eff) "%s: act:0x%01x msk:0x%01x eff:0x%01x"
ot_alert_timer_expire(const char *id, char cls) "%s: class %c"
ot_alert_io_read_out(const char *id, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%03x (%s), val=0x%x, pc=0x%x"
ot_alert_io_write(const char *id, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%03x (%s), val=0x%x, pc=0x%x"
ot_alert_set_class_state(const char *id, char cls, const char *ost, const char *nst) "%s: class %c [%s] -> [%s]"
ot_alert_set_class_timer(const char *id, char cls, const char *st, uint64_t us, uint32_t cycles) "%s: class %c [%s] %" PRIu64 " us (%u cycles)"
ot_alert_signal_class(const char *id, unsigned alert, char cls, bool class_en) "%s: alert:%u -> class %c enabled:%u"
ot_alert_signal_tx(const char *id, unsigned n, bool level, bool alert_en) "%s: alert:%u level:%u enabled:%u"
ot_alert_skip_active(const char *id, char cls, const char *stname) "%s: class %c %s"

# ot_aon_timer.c

ot_aon_timer_irqs(bool wakeup, bool bark, bool bite) "wkup:%u bark:%u bite:%u"
ot_aon_timer_read_out(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_aon_timer_set_wdog(int64_t now, int64_t next) "now %" PRId64 ", next %" PRId64
ot_aon_timer_write(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"

# ot_ast.c

ot_ast_io_read_out(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_ast_io_write(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_ast_no_entropy(unsigned count) "only %u words available"

# ot_clkmgr.c

ot_clkmgr_clock_hint(const char *name, unsigned clock, bool active) "%s(%u): %u"
ot_clkmgr_get_clock_hints(uint32_t req, uint32_t status, uint32_t hint) "req:0x%02x clk:0x%02x hint:0x%02x"
ot_clkmgr_io_read_out(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_clkmgr_io_write(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"

# ot_csrng.c

ot_csrng_change_state(int line, const char *old, int nold, const char *new, int nnew) "@ %d [%s:%d] -> [%s:%d]"
ot_csrng_command_scheduler(unsigned slot, const char *action) "#%u: %s"
ot_csrng_complete_command(unsigned slot, const char *kind, const char *cmd, unsigned acmd, int res) "#%u (%s) acmd: %s(%u): %d"
ot_csrng_connection(unsigned slot) "#%u"
ot_csrng_defer_generation(unsigned slot) "#%u instanciation not yet completed"
ot_csrng_end_of_gen(unsigned slot, unsigned rempack) "#%u rem %u"
ot_csrng_entropy_injecter(unsigned slot, const char *action) "#%u: %s"
ot_csrng_entropy_rejected(unsigned slot, const char *reason, int res) "#%u: %s (%d)"
ot_csrng_error(const char *func, int line, const char *err) "%s:%d %s"
ot_csrng_expedite_uninstantiation(unsigned slot) "#%u"
ot_csrng_fill_entropy(unsigned slot, bool fips) "#%u fips %u"
ot_csrng_generate(unsigned slot, unsigned count) "#%u %u packets to generate"
ot_csrng_hwapp_need_entropy(unsigned slot, const char *msg) "#%u: %s"
ot_csrng_hwapp_ready(unsigned slot, bool ready, unsigned rem) "#%u: %u rem %u"
ot_csrng_info(const char *func, int line, const char *msg, uint32_t value) "%s:%d %s: 0x%08x"
ot_csrng_instantiate(unsigned slot, bool on) "#%u: %u"
ot_csrng_invalid_state(const char *func, const char *state, int st) "%s [%s:%d]"
ot_csrng_io_read_out(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_csrng_io_write(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_csrng_irqs(uint32_t active, uint32_t mask, uint32_t eff) "act:0x%08x msk:0x%08x eff:0x%08x"
ot_csrng_push_command(unsigned slot, const char *cmd, unsigned acmd, char code, unsigned len) "#%u: %s(%u) %clen: %u"
ot_csrng_read_state_db(unsigned slot, unsigned pos, uint32_t val) "#%u [%u] = 0x%08x"
ot_csrng_request_entropy(unsigned slot, int gen) "#%u gen %d"
ot_csrng_retry_es_init(unsigned retry_count) "rescheduling initial ES request: %u to go"
ot_csrng_reset(void) ""
ot_csrng_schedule(unsigned slot, const char *kind) "#%u: %s"
ot_csrng_scheduling_command(unsigned slot) "#%u"
ot_csrng_show_buffer(const char *func, int line, unsigned appid, const char *msg, const char *hexstr) "%s:%u #%u %s: %s"
ot_csrng_show_command(const char *msg, unsigned slot, const char *cmd, unsigned acmd) "%s slot #%u, acmd: %s(%u)"
ot_csrng_swapp_fill(unsigned count) "%u to go"
ot_csrng_try_schedule_genbits(unsigned slot, bool ready, bool queued, unsigned rem) "? #%u rdy:%u q:%u rem:%u"

# ot_dev_proxy.c

ot_dev_proxy_dispatch_request(char a, char b) "%c%c"
ot_dev_proxy_fe_error(int err) "error: %d"
ot_dev_proxy_read_buffer(const char *prefix, unsigned devix, bool mbx, unsigned offset, unsigned count) "%s #%u mbx:%u 0x%02x %u"
ot_dev_proxy_read_memory(const char *prefix, unsigned devix, unsigned offset, unsigned count) "%s #%u 0x%08x 0x%x"
ot_dev_proxy_read_reg(const char *prefix, unsigned devix, unsigned offset) "%s #%u 0x%08x"
ot_dev_proxy_uid_error(const char *msg, unsigned expuid, unsigned realuid) "%s: expected %u, received %u"
ot_dev_proxy_write_buffer(const char *prefix, unsigned devix, bool mbx, unsigned offset, unsigned count) "%s #%u mbx:%u 0x%02x %u"
ot_dev_proxy_write_memory(const char *prefix, unsigned devix, unsigned offset, unsigned count) "%s #%u 0x%08x 0x%x"
ot_dev_proxy_write_reg(const char *prefix, unsigned devix, unsigned offset, unsigned value) "%s #%u 0x%08x 0x%08x"

# ot_dm_tl.c

ot_dm_tl_capture(uint32_t addr, uint32_t value) "0x%x: 0x%08x"
ot_dm_tl_invalid_addr(uint32_t addr) "0x%x"
ot_dm_tl_update(uint32_t addr, uint32_t value, const char *msg, uint32_t res) "0x%x: 0x%x (%s): %u"

# ot_dma.c

ot_dma_abort(const char *did) "%s"
ot_dma_change_state(int line, const char *state, int stateval) "@%d: %s [%d]"
ot_dma_check_device(const char *did, const char *dir, const char *asname, uint64_t addr, uint64_t size, const char *rootname, unsigned ram) "%s: %s as=%s addr=0x%" PRIx64 " size:0x%" PRIx64 " %s ram:%u"
ot_dma_complete(const char *did, int res) "%s: %d"
ot_dma_io_read_out(const char *did, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_dma_io_write(const char *did, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_dma_irqs(uint32_t active, uint32_t mask, uint32_t eff) "act:0x%08x msk:0x%08x eff:0x%08x"
ot_dma_new_op(const char *did, const char *dir, const char *asname, const char *mname, uint64_t addr, uint64_t size) "%s: %s as:%s m:%s a:0x%" PRIx64 " s:0x%" PRIx64
ot_dma_operation(const char *op, bool init) "%s: %u"
ot_dma_set_error(const char *did, const char *func, int line, unsigned err) "%s: %s:%d err:%u"
ot_dma_transfer(const char *did, const char *dir, const char *asname, uint64_t addr, uint64_t size) "%s: %s as=%s addr=0x%" PRIx64 " size:0x%" PRIx64

# ot_edn.c

ot_edn_change_state(unsigned appid, int line, const char *old, int nold, const char *new, int nnew) "a#%u @ %d [%s:%d] -> [%s:%d]"
ot_edn_connect_endpoint(unsigned appid, unsigned epid) "a#%u:e#%u"
ot_edn_csrng_ack(unsigned appid, const char *state, int level) "a#%u %s %d"
ot_edn_ctrl_in_state(unsigned appid, const char *state, int nstate) "a#%u [%s:%d]"
ot_edn_dinfo(unsigned appid, const char *func, int line, const char *msg, uint32_t value) "a#%u %s:%d %s %u"
ot_edn_enable(unsigned appid, const char *msg) "a#%u: %s"
ot_edn_ep_fifo(unsigned appid, const char *msg, unsigned remwslot) "a#%u %s rem:%u"
ot_edn_ep_request(unsigned appid, bool avail, const char *state, int st, bool refill, unsigned rem) "a#%u avail %u, [%s:%d], refill %u, rem %u"
ot_edn_error(unsigned appid, const char *func, int line, const char *err) "a#%u %s:%d %s"
ot_edn_fill_bits(unsigned appid, unsigned rem, bool packet_fips, bool fips) "a#%u rem %u, fips %u/%u"
ot_edn_fill_endpoint(unsigned appid, unsigned epid, uint32_t bits, bool fips, size_t gcnt, size_t tcnt) "a#%u:e#%u bits 0x%08x fips %u count %lu/%lu"
ot_edn_handle_ep_request(unsigned appid, unsigned epid) "a#%u:e#%u"
ot_edn_invalid_state(unsigned appid, const char *func, const char *state, int st) "a#%u %s [%s:%d]"
ot_edn_io_read_out(unsigned appid, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "a#%u addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_edn_io_write(unsigned appid, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "a#%u addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_edn_irqs(unsigned appid, uint32_t active, uint32_t mask, uint32_t eff) "#%u act:0x%08x msk:0x%08x eff:0x%08x"
ot_edn_request_entropy(unsigned appid, unsigned epid) "a#%u:e#%u"
ot_edn_reset(unsigned appid) "a#%u"
ot_edn_schedule(unsigned appid, const char *cause) "a#%u %s"
ot_edn_update_genbits_ready(unsigned appid, unsigned rem, unsigned fslot, bool accept) "a#%u rem packet %u, free slot %u, accept? %u"
ot_edn_xinfo(unsigned appid, const char *func, int line, const char *msg, uint32_t value) "a#%u %s:%d %s 0x%08x"

# ot_entropy_src.c

ot_entropy_src_available(const char *state, int st) "entropy source is ready in [%s:%u]"
ot_entropy_src_change_state(int line, const char *old, int nold, const char *new, int nnew) "@ %d [%s:%d] -> [%s:%d]"
ot_entropy_src_consume_entropy(bool obs_fifo, bool bypass, bool hw_path, unsigned ncount) "obs_fifo %u, bypass %u, hw_path %u ncount %u"
ot_entropy_src_error(const char *msg, const char *state, int st) "%s [%s:%u]"
ot_entropy_src_fill_noise(unsigned count, unsigned infifo) "up to %u, input fifo %u"
ot_entropy_src_info(const char *msg) "%s"
ot_entropy_src_init_ongoing(const char *state, int st, int ns) "ES still initializing in [%s:%u] %d ns to go"
ot_entropy_src_io_read_out(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_entropy_src_io_write(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_entropy_src_is_fips_capable(bool en, bool es_route, bool es_type, bool rng_bit_en, bool res) "en:%u rt:%u tp:%u !rb:%u => %u"
ot_entropy_src_no_entropy(unsigned count) "only %u words available"
ot_entropy_src_obs_fifo(unsigned level, unsigned thold) "level %u, threshold %u"
ot_entropy_src_otp_conf(bool fw_read, bool fw_over) "fw_read %u, fw_over %u"
ot_entropy_src_push_bypass_entropy(unsigned slot) "final FIFO depth: %u"
ot_entropy_src_reset(void) ""
ot_entropy_src_show_buffer(const char *func, int line, const char *msg, const char *hexstr) "%s:%u %s: %s"
ot_entropy_src_update_filler(bool iok, bool ook, bool pok, bool all) "in %u, out %u, proc %u -> %u"
ot_entropy_src_update_generation(unsigned gennum) "%u"

# ot_flash.c

ot_flash_error(const char *func, int line, const char *err) "%s:%d %s"
ot_flash_info(const char *func, int line, const char *msg, uint32_t value) "%s:%d %s: 0x%08x"
ot_flash_info_part(uint32_t op_addr, unsigned bank, unsigned infosel, uint32_t addr) "op_addr 0x%06x bank %u infosel %u addr 0x%06x"
ot_flash_io_read_out(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_flash_io_write(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_flash_irqs(uint32_t active, uint32_t mask, uint32_t eff) "act:0x%08x msk:0x%08x eff:0x%08x"
ot_flash_mem_read_out(uint32_t addr, unsigned size, uint32_t val, uint32_t pc) "addr=0x%02x (%u), val=0x%08x, pc=0x%x"
ot_flash_op_complete(int op, bool success) "%d: %u"
ot_flash_op_start(int op) "%d"

# ot_gpio.c

ot_gpio_in_change(const char *id, int no, bool ign, bool on) "%s: gpio[%d] hiz:%u on:%u"
ot_gpio_io_read_out(const char *id, uint32_t addr, const char *regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_gpio_io_write(const char *id, uint32_t addr, const char *regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_gpio_irqs(const char *id, uint32_t active, uint32_t mask, uint32_t eff) "%s: act:0x%08x msk:0x%08x eff:0x%08x"
ot_gpio_pad_attr_change(const char *id, int no, uint32_t cfg) "%s: gpio[%d] 0x%08x"
ot_gpio_refresh_config(const char *id) "%s"
ot_gpio_strap_en(const char *id, int no, bool en) "%s: gpio[%d] en:%u"
ot_gpio_update_input(const char *id, uint32_t prev, uint32_t indata, uint32_t mix, uint32_t ign) "%s: input prev:0x%08x new:0x%08x -> mix:0x%08x (ign: 0x%08x)"
ot_gpio_update_output(const char *id, uint32_t out) "%s: output new:0x%08x"
ot_gpio_update_out_line(const char *id, unsigned ix, int level) "%s: [%u]: %d"

# ot_hmac.c

ot_hmac_debug(const char *msg) "%s"
ot_hmac_fifo_write(uint32_t addr, uint32_t val, unsigned size, uint32_t pc) "addr=0x%02x, val=0x%x (%u), pc=0x%x"
ot_hmac_io_read_out(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_hmac_io_write(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"

# ot_i2c_dj.c

ot_i2c_host_recv(const char *id, unsigned int entries, unsigned int bytes_to_read) "[%s] rx_fifo_entries:%u bytes_to_read:%u"
ot_i2c_host_send(const char *id, unsigned int entries, unsigned int host_tx_threshold) "[%s] tx_fifo_entries:%u tx_threshold:%u"
ot_i2c_io_read(const char *id, unsigned int addr, const char *regname, uint64_t val, uint64_t pc) "[%s] addr:0x%02x (%s), val:0x%" PRIx64", pc:0x%" PRIx64
ot_i2c_io_write(const char *id, unsigned int addr, const char *regname, uint64_t val, uint64_t pc) "[%s] addr:0x%02x (%s), val:0x%" PRIx64", pc:0x%" PRIx64
ot_i2c_irq(const char *id, const char *irq_id, bool en) "[%s] set interrupt %s to %u"
ot_i2c_target_recv(const char *id, unsigned int entries, uint8_t data) "[%s] tx_fifo_entries:%u data:0x%02x"
ot_i2c_target_set_acqdata(const char *id, unsigned int entries, uint8_t data, unsigned int signal) "[%s] rx_fifo_entries:%u data:0x%02x signal:0x%02x"
ot_i2c_update_irqs(const char *id, uint32_t active, uint32_t mask, uint32_t eff) "[%s] act:0x%08x msk:0x%08x eff:0x%08x"

# ot_ibex_wrapper.c

ot_ibex_wrapper_cpu_enable(const char *id, const char *ch, bool level) "%s: %s:%u"
ot_ibex_wrapper_error(const char *id, const char *func, int line, const char *msg) "%s: %s:%d %s"
ot_ibex_wrapper_escalate_rx(const char *id, bool level) "%s: %u"
ot_ibex_wrapper_exit(const char *id, const char *msg, int val) "%s: %s (%d)"
ot_ibex_wrapper_fill_entropy(const char *id, uint32_t bits, bool fips) "%s: 0x%08x fips:%u"
ot_ibex_wrapper_info(const char *id, const char *func, int line, const char *msg) "%s: %s:%d %s"
ot_ibex_wrapper_io_read_out(const char *id, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%08x, pc=0x%x"
ot_ibex_wrapper_io_write(const char *id, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%08x, pc=0x%x"
ot_ibex_wrapper_map(const char *id, unsigned slot, uint32_t src, uint32_t dst, uint32_t size, const char *name, uint32_t offset) "%s: region %u from 0x%08x to 0x%08x on 0x%x bytes (%s), off 0x%x"
ot_ibex_wrapper_request_entropy(const char *id, bool again) "%s: %u"
ot_ibex_wrapper_reset(const char *id) "%s"
ot_ibex_wrapper_unmap(const char *id, unsigned slot) "%s: region %u"
ot_ibex_wrapper_update_exec(const char *id, uint32_t bm, bool esc_rx, bool cpu_en) "%s: 0x%x %u-> CPU enable %u"

# ot_kmac.c

ot_kmac_app_finished(unsigned app_idx) "#%u"
ot_kmac_app_start(unsigned app_idx) "#%u"
ot_kmac_change_state_app(unsigned app_idx, int line, const char *old, int nold, const char *new, int nnew) "#%u @ %d [%s:%d] -> [%s:%d]"
ot_kmac_change_state_sw(int line, const char *old, int nold, const char *new, int nnew) "@ %d [%s:%d] -> [%s:%d]"
ot_kmac_debug(const char *msg) "%s"
ot_kmac_io_read_out(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_kmac_io_write(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_kmac_msgfifo_write(uint32_t addr, uint32_t val, unsigned size, uint32_t pc) "addr=0x%03x, val=0x%x (%u), pc=0x%x"
ot_kmac_process_sw_command(int cmd, const char *cmd_str) "cmd=0x%02x (%s)"
ot_kmac_report_error(int code, const char *code_str, uint32_t info) "code=0x%02x (%s) info=0x%06x"
ot_kmac_state_read_out(uint32_t addr, uint32_t val, uint32_t pc) "addr=0x%03x, val=0x%x, pc=0x%x"

# ot_lc_ctrl.c

ot_lc_ctrl_change_state(int line, const char *old, int nold, const char *new, int nnew) "@ %d [%s:%d] -> [%s:%d]"
ot_lc_ctrl_error(const char *msg) "%s"
ot_lc_ctrl_escalate(const char *fsm, const char *lc) "%s: %s"
ot_lc_ctrl_escalate_rx(unsigned line, bool level) "%u: %u"
ot_lc_ctrl_info(const char *msg) "%s"
ot_lc_ctrl_initialize(const char *cst, int cstix, unsigned tcount, const char *state, int six) "%s (%d), tcount %u, state %s (%u)"
ot_lc_ctrl_io_read_out(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_lc_ctrl_io_read_out_repeat(uint32_t addr, const char * regname, unsigned count, uint32_t val) "addr=0x%02x (%s) repeated %u times, val=0x%x"
ot_lc_ctrl_io_write(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_lc_ctrl_load_otp_token(const char *tk, unsigned tkix, const char *inv, uint64_t hi, uint64_t lo) "token %s (%u) %svalid: 0x%016" PRIx64 "%016" PRIx64
ot_lc_ctrl_mismatch_token(const char *tkkind, const char *tkname, unsigned tok, uint64_t htkhi, uint64_t htklo, uint64_t rtkhi, uint64_t rtklo) "%s token %s (%u): 0x%016" PRIx64 "%016" PRIx64 ", ref 0x%016" PRIx64 "%016" PRIx64
ot_lc_ctrl_pwr_lc_req(const char *where) "%s"
ot_lc_ctrl_reset(void) ""
ot_lc_ctrl_start_transition(const char *sr, const char *kind, const char *cst, int cstix, const char *tst, int tstix, unsigned tcount) "%s start %s transit from %s (%d) to %s (%d) at tcount %u"
ot_lc_ctrl_transit_request(const char *sr, const char *cst, int cstix, const char *tst, int tstix, const char *tk, int tkix) "%s req. transit from %s (%d) to %s (%d) with token %s (%d)"
ot_lc_ctrl_update_broadcast(const char *st, const char *bcast, bool olvl, bool nlvl) "%s: %s %u -> %u"

# ot_mbx.c

ot_mbx_busy(const char * mid, const char *state) "%s: %s"
ot_mbx_change_state(const char * mid, const char *state) "%s: %s"
ot_mbx_host_io_read_out(const char * mid, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_mbx_host_io_write(const char * mid, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_mbx_host_update_irq(int prev, int next) "%d -> %d"
ot_mbx_status(const char *mbx_id, int line, bool abort, bool error, bool busy) "%s: [%d] abort:%u error:%u busy:%u"
ot_mbx_sys_io_read_out(const char * mid, uint32_t addr, const char * regname, uint32_t val) "%s: addr=0x%02x (%s), val=0x%x"
ot_mbx_sys_io_write(const char * mid, uint32_t addr, const char * regname, uint32_t val) "%s: addr=0x%02x (%s), val=0x%x"

# ot_otbn.c

ot_otbn_change_status(const char * status) "status=%s"
ot_otbn_deny(uint32_t pc, const char *msg) "pc=0x%x %s"
ot_otbn_error(const char *msg) "%s"
ot_otbn_io_read_out(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_otbn_io_write(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_otbn_irq(uint32_t active, uint32_t mask, bool level) "act:0x%08x msk:0x%08x lvl:%u"
ot_otbn_mem_read(char mem, uint32_t addr, uint32_t value) "%cmem addr=0x%04x, val=0x%08x"
ot_otbn_mem_write(char mem, uint32_t addr, uint32_t value, const char *outcome) "%cmem addr=0x%04x, val=0x%08x%s"
ot_otbn_post_execute(uint32_t errbits, uint32_t insncount) "errbits=0x%08x, insncount=%u"
ot_otbn_proxy_completion_bh(unsigned cmd) "aftercmd=0x%02x"
ot_otbn_proxy_entropy_request(unsigned rnd) "%u"
ot_otbn_proxy_entropy_req_bh(void) ""
ot_otbn_proxy_push_entropy(const char *kind, bool fips) "%s: fips %u"
ot_otbn_request_entropy(unsigned ep) "ep:%u"

# ot_otp.c

ot_otp_addr_to_part(uint32_t addr, const char *part, unsigned pix) "addr 0x%08x partition %s (#%u)"
ot_otp_access_error_on(int part, uint32_t addr, const char *msg) "part #%d, addr 0x%04x: %s"
ot_otp_dai_change_state(int line, const char *old, int nold, const char *new, int nnew) "@ %d [%s:%d] -> [%s:%d]"
ot_otp_dai_read(const char* part, unsigned pix, uint32_t hi, uint32_t lo) "DAI read %s (#%u): 0x%08x%08x"
ot_otp_initial_lifecycle(uint32_t lc_state, unsigned tcount) "lifecyle 0x%x, transition count %u"
ot_otp_initialize(void) ""
ot_otp_io_read_out(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_otp_io_write(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_otp_integrity_report(const char* part, unsigned pix, const char *msg) "partition %s (#%u) %s"
ot_otp_keygen_entropy(unsigned slot, bool resched) "%u slots, resched: %u"
ot_otp_lc_broadcast(unsigned sig, bool level) "bcast %u, level %u"
ot_otp_load_token(const char *token, unsigned tkx, uint64_t hi, uint64_t lo, const char *valid) "%s (%u) 0x%016" PRIx64 "%016" PRIx64 ": %svalid"
ot_otp_lci_change_state(int line, const char *old, int nold, const char *new, int nnew) "@ %d [%s:%d] -> [%s:%d]"
ot_otp_lci_write(unsigned pos, uint16_t cval, uint16_t nval) "@ %u 0x%04x -> 0x%04x"
ot_otp_load_backend(unsigned ver, const char *mode) "loading OTP image v%u in %s mode"
ot_otp_mismatch_digest(const char* part, unsigned pix, uint64_t sdig, uint64_t ldig) "Mismatch digest on %s (#%u), stored 0x%" PRIx64 " found 0x%" PRIx64
ot_otp_pwr_otp_req(const char *where) "%s"
ot_otp_reset(void) ""
ot_otp_set_error(unsigned pix, const char* err, unsigned eix) "#%u: %s (%u)"
ot_otp_skip_digest(const char* part, unsigned pix) "skipping empty digest on %s (#%u)"

# ot_pinmux.c

ot_pinmux_io_read_out(uint32_t addr, uint32_t val, uint32_t pc) "addr=0x%02x, val=0x%x, pc=0x%x"
ot_pinmux_io_write(uint32_t addr, uint32_t val, uint32_t pc) "addr=0x%02x, val=0x%x, pc=0x%x"

# ot_plic_ext.c

ot_plic_ext_io_read_out(const char *id, uint32_t addr, const char *regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_plic_ext_io_write(const char *id, uint32_t addr, const char *regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"

# ot_pwrmgr.c

ot_pwrmgr_change_state(const char *id, int line, const char *type, const char *old, int nold, const char *new, int nnew) "%s @ %d %s: [%s:%d] -> [%s:%d]"
ot_pwrmgr_escalate_rx(const char *id, bool level) "%s: level %u"
ot_pwrmgr_go_idle(const char *id, const char *state) "%s: %s"
ot_pwrmgr_ignore_req(const char *reason) "%s"
ot_pwrmgr_io_read_out(const char *id, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_pwrmgr_io_write(const char *id, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_pwrmgr_reset(const char *id, const char *action) "%s: %s"
ot_pwrmgr_reset_req(const char *id, const char *name, unsigned val) "%s: %s: %u"
ot_pwrmgr_rom(const char *id, int n, const char *what, bool val) "%s rom #%u %s=%u"
ot_pwrmgr_rst_req(const char *id, const char *name, unsigned src) "%s %s(%u)"
ot_pwrmgr_schedule_fsm(const char *id, const char *func, int line) "%s @ %s:%d"
ot_pwrmgr_shutdown(const char *id, bool main) "%s: main %u"
ot_pwrmgr_sw_rst_req(const char *id, unsigned src, bool active) "%s: %u: %u"
ot_pwrmgr_wkup(const char *id, const char *name, unsigned src, bool active) "%s: %s(%u): %u"

# ot_rom_ctrl.c

ot_rom_ctrl_io_read_out(const char *id, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_rom_ctrl_io_write(const char *id, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_rom_ctrl_load_rom_no_image(const char *id) "%s: ROM image not defined"
ot_rom_ctrl_mem_read_out(const char *id, uint32_t addr, uint32_t val, uint32_t pc) "%s: addr=0x%04x, val=0x%x, pc=0x%x"
ot_rom_ctrl_mem_rejects(const char *id, uint32_t addr, bool is_write, uint32_t pc) "%s: addr=0x%04x, is_write=%u, pc=0x%x"
ot_rom_ctrl_mem_write(const char *id, uint32_t addr, uint32_t val, uint32_t pc) "%s: addr=0x%04x, val=0x%x, pc=0x%x"
ot_rom_ctrl_reset(const char *id, const char *phase) "%s: %s"

# ot_rstmgr.c

ot_rstmgr_io_read_out(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_rstmgr_io_write(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_rstmgr_reset(void) ""
ot_rstmgr_reset_req(const char *req, unsigned reqix, bool fastclk) "%s(%u) @%u"
ot_rstmgr_sw_reset(const char *devpath) "SW reset %s"
ot_rstmgr_sw_rst(const char *path, bool reset) "%s: reset:%u"

# ot_sensor.c

ot_sensor_io_read_out(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_sensor_io_write(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"

# ot_soc_proxy.c

ot_soc_proxy_ingress_irq(const char * id, unsigned n, bool level) "%s: #%u: %u"
ot_soc_proxy_io_read_out(const char * id, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_soc_proxy_io_write(const char * id, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_soc_proxy_update_irq(const char * id, unsigned n, int prev, int next) "%s: #%u %d -> %d"

# ot_spi_device.c

ot_spi_device_buf_read_out(uint32_t addr, unsigned size, uint32_t val, uint32_t pc) "addr=0x%02x, sz=%u, val=0x%x, pc=0x%x"
ot_spi_device_buf_write_in(uint32_t addr, unsigned size, uint32_t val, uint32_t pc) "addr=0x%02x, sz=%u,  val=0x%x, pc=0x%x"
ot_spi_device_bus_change_state(int line, const char *state, int stateval) "@%d: %s [%d]"
ot_spi_device_chr_cs_assert(unsigned count, bool release, char rx, char tx, const char *st) "0x%x bytes, /cs: %u, rx: %csb, tx: %csb, mode:%s"
ot_spi_device_chr_error(const char *err) "%s"
ot_spi_device_flash_byte_unexpected(uint8_t rx) "unexpected byte 0x%02x after completed command"
ot_spi_device_flash_change_state(int line, const char *state, int stateval) "@%d: %s [%d]"
ot_spi_device_flash_cross_buffer(const char *msg, uint32_t addr) "%s 0x%08x"
ot_spi_device_flash_disabled_slot(uint8_t cmd, unsigned slot) "cmd 0x%02x matching disabled slot %u"
ot_spi_device_flash_exec(const char *cmd) "%s"
ot_spi_device_flash_ignored_command(const char* msg, uint8_t cmd) "%s cmd 0x%02x"
ot_spi_device_flash_new_command(const char* type, uint8_t cmd, unsigned slot) "%s cmd 0x%02x slot %u"
ot_spi_device_flash_overflow(const char *msg) "%s"
ot_spi_device_flash_pace(const char *msg, bool pending) "%s: %u"
ot_spi_device_flash_payload(unsigned fpos, unsigned idx, unsigned len) "pos:%u idx:%u len:%u"
ot_spi_device_flash_push_address(uint32_t address) "0x%08x"
ot_spi_device_flash_set_read_addr(uint32_t addr) "0x%08x"
ot_spi_device_flash_read_status(unsigned slot, uint8_t status) "sr[%u] 0x%02x"
ot_spi_device_flash_read_threshold(uint32_t addr, uint32_t threshold) "0x%08x @ 0x%08x"
ot_spi_device_flash_upload(unsigned slot, uint32_t cmd_info, bool busy) "slot:%d info:0x%08x busy:%u"
ot_spi_device_gen_fifo_error(const char *msg) "%s"
ot_spi_device_gen_phase(const char *func, unsigned off, unsigned lim, bool phase) "%s off:0x%03x lim:0x%03x ph:%u"
ot_spi_device_gen_rx_timeout(unsigned count) "%d"
ot_spi_device_gen_update_fifo(const char *fifo, int line, uint32_t val) "%s@%d: 0x%08x"
ot_spi_device_io_spi_read_out(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_spi_device_io_spi_write_in(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_spi_device_set_irq(const char *name, unsigned irq) "%s [%u]"
ot_spi_device_io_tpm_read_out(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_spi_device_io_tpm_write_in(uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_spi_device_update_last_read_addr(uint32_t addr) "0x%08x"

# ot_spi_host.c

ot_spi_host_command(const char *id, const char *dir, const char *spd, uint32_t csid, bool active, unsigned len, bool start) "%s: d:%s s:%s cs#:%u csa:%u len:%u (t:%u)"
ot_spi_host_cs(const char *id, uint32_t csid, const char *level) "%s: cs#:%u %sselected"
ot_spi_host_debug(const char *id, const char *msg) "%s: %s"
ot_spi_host_debug1(const char *id, const char *msg, uint32_t val) "%s: %s 0x%x"
ot_spi_host_fsm(const char *id, const char *cause) "%s: step %s"
ot_spi_host_io_read(const char *id, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr:0x%02x (%s), val:0x%x, pc:0x%x"
ot_spi_host_io_read_repeat(const char *id, size_t count) "%s: last read repeated %zu times"
ot_spi_host_io_write(const char *id, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr:0x%02x (%s), val:0x%x, pc:0x%x"
ot_spi_host_reject(const char *id, const char *msg) "%s: %s"
ot_spi_host_reset(const char *id, const char *msg) "%s: %s"
ot_spi_host_status(const char *id, const char *msg, uint32_t status, const char *str, unsigned cmd, unsigned rxd, unsigned txd) "%s: %s 0x%08x s:%s cq:%u rq:%u tq:%u"
ot_spi_host_transfer(const char *id, uint32_t tx_data, uint32_t rx_data) "%s: tx_data: 0x%02x rx_data: 0x%02x"

# ot_sram_ctrl.c

ot_sram_ctrl_expediate_init(const char *id, const char *from) "%s from %s"
ot_sram_ctrl_initialize(const char *id, unsigned start, unsigned end) "%s 0x%08x..0x%08x"
ot_sram_ctrl_initialization_complete(const char *id, const char *from) "%s: after %s"
ot_sram_ctrl_io_read_out(const char *id, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_sram_ctrl_io_write(const char *id, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_sram_ctrl_mem_io_readi(const char *id, uint32_t addr, unsigned size, uint32_t pc) "%s: addr=0x%06x, size=%u, pc=0x%x"
ot_sram_ctrl_mem_io_reado(const char *id, uint32_t addr, unsigned size, uint32_t val, uint32_t pc) "%s: addr=0x%06x, size=%u, val=0x%08x, pc=0x%x"
ot_sram_ctrl_mem_io_write(const char *id, uint32_t addr, unsigned size, uint32_t val, uint32_t pc) "%s: addr=0x%06x, size=%u, val=0x%08x, pc=0x%x"
ot_sram_ctrl_mem_not_initialized(const char *id, unsigned ix, uint64_t bm) "%s: [%u] %016" PRIx64
ot_sram_ctrl_no_mem_change(const char *id, const char *msg) "%s: %s"
ot_sram_ctrl_request_hw_init(const char *id) "%s"
ot_sram_ctrl_reseed(const char *id) "%s"
ot_sram_ctrl_schedule_init(const char *id) "%s"
ot_sram_ctrl_seed_status(const char *id, bool seed_valid) "%s: seed valid: %u"
ot_sram_ctrl_switch_mem(const char *id, const char *dest) "%s: to %s"
ot_sram_ctrl_timed_init(const char *id) "%s"

# ot_timer.c

ot_timer_io_read_out(const char *id, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_timer_update_irq(const char *id, bool level) "%s: %d"
ot_timer_io_write(const char *id, uint32_t addr, const char * regname, uint32_t val, uint32_t pc) "%s: addr=0x%02x (%s), val=0x%x, pc=0x%x"

# ot_uart.c

ot_uart_debug(const char *msg) "%s"
ot_uart_io_read_out(uint32_t addr, const char *regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_uart_io_write(uint32_t addr, const char *regname, uint32_t val, uint32_t pc) "addr=0x%02x (%s), val=0x%x, pc=0x%x"
ot_uart_irqs(uint32_t active, uint32_t mask, uint32_t eff) "act:0x%08x msk:0x%08x eff:0x%08x"
